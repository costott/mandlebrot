// Â© 2023 costott. All rights reserved. 
// This code is provided for viewing purposes only. Copying, reproduction, 
// or distribution of this code, in whole or in part, in any form or by any 
// means, is strictly prohibited without prior written permission from the 
// copyright owner.

#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use macroquad::prelude::*;

use mandlebrot::layers::*;
use mandlebrot::palettes::*;
use mandlebrot::App;

use mandlebrot::{Visualiser, Fractal};

#[allow(unused_imports)]
use mandlebrot::Buhddabrot;

fn window_conf() -> Conf {
    Conf {
        window_title: "Mandelbrot".to_owned(),
        fullscreen: true,
        ..Default::default()
    }
}

#[macroquad::main(window_conf)]
async fn main() {
    next_frame().await;

    let visualiser = Visualiser::new(
        Fractal::Mandelbrot,
        0.005, 
        500., 
        4.5,
        (screen_width() as usize, screen_height() as usize),
        Layers::new(vec![
            Layer::new(LayerType::Colour, LayerRange::OutSet, 1.0, Palette::new(
                vec![
                    ColourPoint { colour: PINK, percent: 0.15 },
                    ColourPoint { colour: BLACK, percent: 0.3 },
                    ColourPoint { colour: BLUE, percent: 0.6 },
                    ColourPoint { colour: ORANGE, percent: 0.8 },
                    ColourPoint { colour: WHITE, percent: 0.95 }
                ],
                MappingType::Repeated, 0.125, 0.0
            ))
        ], true)
    );

    // let mut visualiser = Buhddabrot::new(0.005, 2_500., 50_000_000, true);

    // visualiser.load(0.002, -1.15, 0., 2_500.);
    // visualiser.load((0.308400934550109715351-0.308400934548031413847)/600., 0.5*(0.308400934550109715351+0.308400934548031413847), 0.5*(0.0252645634954311029242+0.0252645634938723767962), 2500.0);
    // visualiser.load(0.005, 0.3080738405277603, 0.022720381308498527, 600.1);
    // visualiser.load( 0.000000000007506999894187192, -1.7478569335479708, 2.0020200029685542e-5, 500.);
    // visualiser.load(0.000000000012544813697480459, -1.7857173222072602, 6.485835101156323e-5, 2000.);
    // visualiser.load(0.00000000027267392679500867, -1.7588897614644763, -0.019085635569219, 2000.0);
    // visualiser.load(0.000000000000040685052352904394, -1.758889768238364, -0.01908561816083628, 3000.0);
    // visualiser.load(0.005, -1.7492892108246816, 3.46877435179622e-6, 500.0);
    // visualiser.load_big(0.00000000000000000000000000481549551493264, "-1.749289210824690998201297621112748506015297019635551081296644115870009272839524783194065093994140625", "0.000003468774344709061640377300348104784882149660397099958109537258688589604150101508572845432354370132088661193847", 10000.);
    // visualiser.load_big(0.005, "-1.749289210824690998201297621112748506015297019635551081296644115870009272839524783194065093994140625", "0.000003468774344709061640377300348104784882149660397099958109537258688589604150101508572845432354370132088661193847", 500.);
    // visualiser.load_big(0.005, "-0.774699560718647404701108719005481533330491416152318659839141890000036028141039423644542694091796875", "-0.13739254274618173904113459016326420762936427911452031772336808412848796479011070914566516876220703125", 1000.);
    //  -6683474828812724098..3652989658973381813 * 2 ^ -229, -1185310599968407739..7748024324427505143 * 2 ^ -229
    // visualiser.load_big(0.005, "0.360240443437614363236125244449545308482607807958585750488375814740195346059218100311752936722773426396233731729724987737320035372683285317664532401218521579554288661726564324134702299962817029213329980895208036363104546639698106204384566555001322985619004717862781192694046362748742863016467354574422779443226982622356594130430232458472420816652623492974891730419252651127672782407292315574480207005828774566475024380960675386215814315654794021855269375824443853463117354448779647099224311848192893972572398662626725254769950976527431277402440752868498588785436705371093442460696090720654908973712759963732914849861213100695402602927267843779747314419332179148608587129105289166676461292845685734536033692577618496925170576714796693411776794742904333484665301628662532967079174729170714156810530598764525260869731233845987202037712637770582084286587072766838497865108477149114659838883818795374195150936369987302574377608649625020864292915913378927790344097552591919409137354459097560040374880346637533711271919419723135538377394364882968994646845930838049998854075817859391340445151448381853615103761584177161812057928", "-0.6413130610648031748603750151793020665794949522823052595561775430644485741727536902556370230689681162370740565537072149790106973211105273740851993394803287437606238596262287731075999483940467161288840614581091294325709988992269165007394305732683208318834672366947550710920088501655704252385244481168836426277052232593412981472237968353661477793530336607247738951625817755401065045362273039788332245567345061665756708689359294516668271440525273653083717877701237756144214394870245598590883973716531691124286669552803640414068523325276808909040317617092683826521501539932397262012011082098721944643118695001226048977430038509470101715555439047884752058334804891389685530946112621573416582482926221804767466258346014417934356149837352092608891639072745930639364693513216719114523328990690069588676087923656657656023794484324797546024248328156586471662631008741349069961493817600100133439721557969263221185095951241491408756751582471307537382827924073746760884081704887902040036056611401378785952452105099242499241003208013460878442953408648178692353788153787229940221611731034405203519945313911627314900851851072122990492499999999999999999991", 500.);

    let mut app = App::new(visualiser).await;
    app.run().await;
}